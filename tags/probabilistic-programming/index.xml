<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Probabilistic Programming | DTAI</title><link>https://dtai.cs.kuleuven.be/stories/tags/probabilistic-programming/</link><atom:link href="https://dtai.cs.kuleuven.be/stories/tags/probabilistic-programming/index.xml" rel="self" type="application/rss+xml"/><description>Probabilistic Programming</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Tue, 31 Mar 2020 10:36:34 +0200</lastBuildDate><image><url>img/map[gravatar:%!s(bool=false) shape:circle]</url><title>Probabilistic Programming</title><link>https://dtai.cs.kuleuven.be/stories/tags/probabilistic-programming/</link></image><item><title>DeepProbLog</title><link>https://dtai.cs.kuleuven.be/stories/post/robin-manhaeve/deepproblog/</link><pubDate>Tue, 31 Mar 2020 10:36:34 +0200</pubDate><guid>https://dtai.cs.kuleuven.be/stories/post/robin-manhaeve/deepproblog/</guid><description>&lt;p>This is a brief overview of DeepProbLog, a neuro-symbolic framework that integrates the probabilistic logic programming language ProbLog with neural networks.
The full paper can be found
&lt;a href="https://arxiv.org/abs/1907.08194" target="_blank" rel="noopener">here&lt;/a>.&lt;/p>
&lt;h2 id="what-is-deepproblog">What is DeepProbLog?&lt;/h2>
&lt;p>DeepProbLog is an extension of ProbLog that integrates neural networks through the concept of the neural predicate. It allows us to combine high-level logical reasoning with the sub-symbolic power of neural networks.&lt;/p>
&lt;p>&lt;img src="dpl.svg" alt="">&lt;/p>
&lt;p>Let&amp;rsquo;s say we want to solve the following problem. We get two handwritten digits (MNIST) and have to determine its sum, e.g. &lt;img src="addition.png" width="256">&lt;/p>
&lt;p>This task can be easily handled in DeepProbLog:&lt;/p>
&lt;pre>&lt;code>nn(mnist_classifier,[X],Y,[0..9]) :: digit(X,Y).
addition(X,Y,Z) :- digit(X,N1), digit(Y,N2), Z is N1+N2.
&lt;/code>&lt;/pre>
&lt;p>Where the first line is a &lt;em>neural predicate&lt;/em> that includes a neural network as a predicate inside of the logical program. This neural network can be trained.
The addition predicate defines the sum of the individual digits. We can now train this DeepProbLog model and all of the neural networks inside of it using examples of additions. It&amp;rsquo;s important to note that the neural networks will, thanks to the logic, learn to recognize individual digits.&lt;/p>
&lt;p>The main strengths of DeepProbLog are:&lt;/p>
&lt;ul>
&lt;li>It combines probabilistic reasoning, logical reasoning and the power of neural networks.&lt;/li>
&lt;li>It can train neural networks and learn probabilistic paramters from examples.&lt;/li>
&lt;li>We retain both logic and neural networks as edge cases.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="pipeline.png" alt="">&lt;/p>
&lt;h2 id="results">Results&lt;/h2>
&lt;h4 id="mnist-addition">MNIST addition&lt;/h4>
&lt;p>We compared the MNIST addition example describe above with a convolutional neural network baseline.
The result shows that the inclusion of the logic allows the model to train quicker and achieve a higher accuracy. It&amp;rsquo;s also important to note that the neural network trained inside the DeepProbLog model can recognize single digits, whereas the convolutional baselines can only classify sums. The separation between the logic and neural aspects results in a more flexible model.
&lt;img src="mnist.png" alt="MNISTS result">&lt;/p>
&lt;h4 id="sketching">Sketching&lt;/h4>
&lt;p>We reimplemented the experiments from the Differentiable Forth paper. These use a sketching approach to learn the missing behaviour from partial programs using small neural modules.&lt;/p>
&lt;p>From the result we can see that we perform similar to the original (neural) model. For learning to sort lists, Differentiable Forth starts to struggle starting from length 4. This is due to the long program trace. DeepProbLog does not have this problem thanks to the fact that it can perform almost all of the program in the logic.
&lt;img src="d4.png" alt="Differentiable Forth result">&lt;/p></description></item><item><title>ProbLog: Probabilistic Logic Programming</title><link>https://dtai.cs.kuleuven.be/stories/post/problog/problog/</link><pubDate>Wed, 01 Jan 2020 16:58:21 +0100</pubDate><guid>https://dtai.cs.kuleuven.be/stories/post/problog/problog/</guid><description>
&lt;div class="card relpub">
&lt;div class="card-body">
&lt;small>
&lt;p>This post is based on the following publications:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://lirias.kuleuven.be/369046">ProbLog2: Probabilistic logic programming&lt;/a>, Dries, Anton; Kimmig, Angelika; Meert, Wannes; Renkens, Joris; Van den Broeck, Guy; Vlasselaer, Jonas; De Raedt, Luc. Lecture ECML PKDD Demo. Notes in Computer Science book series (LNCS, volume 9286), 2015.&lt;/li>
&lt;li>&lt;a href="https://lirias.kuleuven.be/bitstream/123456789/392821/3/plp2cnf.pdf">Inference and learning in probabilistic logic programs using weighted Boolean formulas&lt;/a>, Daan Fierens, Guy Van den Broeck, Joris Renkens, Dimitar Shterionov, Bernd Gutmann, Ingo Thon, Gerda Janssens, and Luc De Raedt. Theory and Practice of Logic Programming, 2015.&lt;/li>
&lt;li>&lt;a href="https://lirias.kuleuven.be/bitstream/123456789/146072/1/ijca">ProbLog: A probabilistic Prolog and its application in link discovery&lt;/a>, L. De Raedt, A. Kimmig, and H. Toivonen, Proceedings of the 20th International Joint Conference on Artificial Intelligence (IJCAI-07), Hyderabad, India, pages 2462-2467, 2007.&lt;/li>
&lt;/ul>
&lt;p>Software is available on the &lt;a href="https://dtai.cs.kuleuven.be/problog">ProbLog&lt;/a> website.&lt;/p>
&lt;/small>
&lt;/div>
&lt;/div>
&lt;p>Probabilistic programming studies probabilistic extensions of programming languages that can be used to model rich domains. The lab has contributed a probabilistic extension of a Prolog, called ProbLog. The resulting language is quite close to a probabilistic database as it imposes probabilities on facts and uses (deterministic) rules to specify dependencies and consequences. Within ProbLog, many techniques for inference and learning have been contributed and ProbLog has also been used in applications in robotics, natural language processing, and bioinformatics.&lt;/p>
&lt;p>&lt;a href="https://dtai.cs.kuleuven.be/problog">https://dtai.cs.kuleuven.be/problog&lt;/a>&lt;/p></description></item></channel></rss>